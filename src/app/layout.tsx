"use client"

// import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/theme-provider";
import { useCallback, useEffect } from "react";
import { usePathname, useRouter } from "next/navigation";

import { load } from "@tauri-apps/plugin-store";
// import { appDataDir } from "@tauri-apps/api/path";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// type WorkspaceProps = {
//   workspace: string[];
// }

export default function RootLayout({
  children,
  notification
}: {
  children: React.ReactNode;
  notification: React.ReactNode;
}) {
  const pathname = usePathname();
  const route = useRouter();
  
  const loadSettingsCheck = useCallback(async () => {
    try {
      const settings = await load("rekan.settings.json");
      
      await settings.reload();
      let workspace : string[] = await settings.get<string[]>("vaults") || [];
      workspace = Array.isArray(workspace) ? workspace : [];
  
      if (workspace.length === 0) {
        route.push("/setup");
        return;
      }
    } catch {
      route.push("/setup");
      return;
    }
  }, [route]);

  useEffect(() => {
    console.log("pathname", pathname);
    if (pathname === "/") {
      loadSettingsCheck();
      return;
    }
  }, [pathname, loadSettingsCheck]);

  return (
    <html lang="en" suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ThemeProvider
          attribute={"class"}
          defaultTheme={"system"}
          enableSystem
          enableColorScheme
          disableTransitionOnChange
        >
          <div className="flex flex-col items-center justify-center w-full h-full">
            <div key="children" className="h-full w-full">{children}</div>
            <div key="notification" className="w-full">{notification}</div>
          </div>
        </ThemeProvider>
      </body>
    </html>
  );
}
